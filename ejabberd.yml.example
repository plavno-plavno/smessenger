###
###              ejabberd configuration file
###
### The parameters used in this configuration file are explained at
###
###       https://docs.ejabberd.im/admin/configuration
###
### The configuration file is written in YAML.
### *******************************************************
### *******           !!! WARNING !!!               *******
### *******     YAML IS INDENTATION SENSITIVE       *******
### ******* MAKE SURE YOU INDENT SECTIONS CORRECTLY *******
### *******************************************************
### Refer to http://en.wikipedia.org/wiki/YAML for the brief description.
###

log_rotate_size: 10485760
log_rotate_count: 1

hosts:
  # - "bubcon.org"
  - localhost

loglevel: info

## If you already have certificates, list them here
# certfiles:
ca_file: /home/ejabberd/conf/certs/ca.pem
certfiles:
 - /home/ejabberd/conf/certs/cert.pem
listen:
  -
    port: 5222
    ip: "::"
    starttls_required: false
    module: ejabberd_c2s
    protocol_options:
      - "no_sslv3"
    max_stanza_size: 65536
    shaper: c2s_shaper
    access: c2s
    zlib: true
    max_fsm_queue: 1000
  -
    port: 5223
    ip: "::"
    module: ejabberd_c2s
    max_stanza_size: 65536
    shaper: c2s_shaper
    access: c2s
    tls: true
    zlib: true
  -
    port: 5269
    ip: "::"
    module: ejabberd_s2s_in
    max_stanza_size: 131072
    shaper: s2s_shaper
  -
    port: 5443
    ip: "::"
    module: ejabberd_http
    tls: true
    request_handlers:
      /api: mod_http_api
      /admin: ejabberd_web_admin
      # /api: mod_http_api
      /http-bind: mod_bosh
      # /captcha: ejabberd_captcha
      # /upload: mod_http_upload
      /websocket: ejabberd_http_ws
  -
    port: 5280
    ip: "::"
    module: ejabberd_http
    request_handlers:
      /admin: ejabberd_web_admin
      /.well-known/acme-challenge: ejabberd_acme
      /websocket: ejabberd_http_ws
  -
    port: 3478
    ip: "::"
    transport: udp
    module: ejabberd_stun
    use_turn: true
    ## The server's public IPv4 address:
    # turn_ipv4_address: "203.0.113.3"
    ## The server's public IPv6 address:
    # turn_ipv6_address: "2001:db8::3"
  -
    port: 1883
    ip: "::"
    module: mod_mqtt
    backlog: 1000

##
## PostgreSQL server:
##
sql_type: pgsql
sql_server: postgres
sql_database: ejabberd
sql_username: ejabberd
sql_password: ejabberd

auth_method: [jwt, sql]
jwt_key: /home/ejabberd/conf/secret.jwk
jwt_jid_field: jid

disable_sasl_mechanisms: ["DIGEST-MD5", "SCRAM-SHA-1", "X-OAUTH2"]

# s2s_use_starttls: optional

acl:
  local:
    user_regexp: ""
  loopback:
    ip:
      - 127.0.0.0/8
      - 172.21.0.0/16 # allow access from docker network: ejabberd-network 
      - ::1/128
  admin:
    user: admin1@localhost

access_rules:
  local:
    allow: local
  c2s:
    deny: blocked
    allow: all
  announce:
    allow: admin
  configure:
    allow: admin
  muc:
    allow: deny
  muc_create:
    allow: local
  muc_admin:
    allow: admin
  register:
    allow: deny
  pubsub_createnode:
    allow: local
  trusted_network:
    allow: loopback

api_permissions:
  "api_access_public":
    who: all
    what:
      - "status"
  "api_access":
    who:
      access:
        - allow: admin
    what:
      - "*"
  "console commands":
    from: ejabberd_ctl
    who: all
    what: "*"
  "webadmin commands":
    from: ejabberd_web_admin
    who: admin
    what: "*"
  "admin access":
    who:
      access:
        allow:
          - acl: loopback
          - acl: admin
      oauth:
        scope: "ejabberd:admin"
        access:
          allow:
            - acl: loopback
            - acl: admin
    what:
      - "*"
      - "!stop"
      - "!start"
  "public commands":
    who:
      ip: 127.0.0.1/8
    what:
      - status
      - connected_users_number

shaper:
  normal:
    rate: 1000
    burst_size: 10000
  fast: 50000

shaper_rules:
  max_user_sessions: 10
  max_user_offline_messages:
    50000: admin
    10000: all
  c2s_shaper:
    none: admin
    normal: all
  s2s_shaper: fast

language: "en"

modules:
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
    db_type: sql
  # mod_avatar: {}
  mod_blocking: {}
  mod_bosh: {}
  mod_caps:
    db_type: sql
  mod_carboncopy: {}
  mod_client_state: {}
  mod_configure: {}
  mod_disco: {}
  # mod_fail2ban:
  #   c2s_max_auth_failures: 10
  #   c2s_auth_ban_lifetime: 60
  # mod_http_api: {}
  # mod_http_upload:
  #   put_url: https://@HOST@:5443/upload
  #   custom_headers:
  #     "Access-Control-Allow-Origin": "https://@HOST@"
  #     "Access-Control-Allow-Methods": "GET,HEAD,PUT,OPTIONS"
  #     "Access-Control-Allow-Headers": "Content-Type"
  mod_last:
    db_type: sql
  # mod_mam:
    ## Mnesia is limited to 2GB, better to use an SQL backend
    ## For small servers SQLite is a good fit and is very easy
    ## to configure. Uncomment this when you have SQL configured:
    # db_type: sql
    # assume_mam_usage: true
    # default: always
  # mod_mqtt: {}
  mod_muc:
    host: "conference.localhost"
    db_type: sql
    access: muc
    access_admin: muc_admin
    access_create: muc_create
    access_persistent: muc_create
    access_register: register
    max_users: 1000
    max_user_conferences: 1000
    history_size: 0
    default_room_options:
      allow_change_subj: true
      allow_query_users: true
      # allow_private_messages: false // this option does not exist
      allow_user_invites: true
      logging: true
      members_by_default: false
      members_only: true
      anonymous: false
      public: false
      persistent: true
      public_list: false
  mod_muc_admin: {}
  mod_offline:
    db_type: sql
    access_max_user_messages: max_user_offline_messages
    store_empty_body: true
  mod_ping: 
    send_pings: true
    ping_interval: 5
    ping_ack_timeout: 5
    timeout_action: kill
  mod_privacy:
    db_type: sql
  mod_private: 
    db_type: sql
  mod_proxy65:
    access: local
    max_connections: 5
  mod_pubsub:
    db_type: sql
    # host: "pubsub.bubcon.org"
    host: "pubsub.localhost"
    access_createnode: pubsub_createnode
    ## reduces resource comsumption, but XEP incompliant
    ignore_pep_from_offline: true
    ## XEP compliant, but increases resource comsumption
    ## ignore_pep_from_offline: false
    max_items_node: 100
    max_subscriptions_node: 255
    last_item_cache: false
##    default_node_config:
##      notification_type: normal
##      notify_retract: false
##      max_items: 0
    plugins:
      - "flat"
      - "hometree"
      - "pep" # pep requires mod_caps
    force_node_config:
      ## Avoid buggy clients to make their bookmarks public
      storage:bookmarks:
        access_model: whitelist
  mod_push: {}
  mod_push_keepalive: {}
  # mod_register:
  #   ## Only accept registration requests from the "trusted"
  #   ## network (see access_rules section above).
  #   ## Think twice before enabling registration from any
  #   ## address. See the Jabber SPAM Manifesto for details:
  #   ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
  #   ip_access: trusted_network
  mod_roster:
    db_type: sql
    versioning: true
    # store_current_id: true # in previous config this value is true but commented as documentation says: if you use mod_shared_roster or mod_shared_roster_ldap, you must set the value of the option to false.
  # mod_s2s_dialback: {}
  mod_shared_roster: 
    db_type: sql
  mod_stats: {}
  mod_time: {}
  mod_stream_mgmt:
    max_ack_queue: infinity
    resend_on_timeout: true
    resume_timeout: 0
  mod_stun_disco: {}
  mod_vcard: 
    db_type: sql
    ##changed to true
    search: true
  #added
  mod_vcard_xupdate: {}
  mod_version: {}

  # mod_bubcon_timestamp: {}

  # mod_bubcon_spam_filter:
  #   rules:
  #     1m: 2
  #     60m: 8
  #     24h: 16
  #     30d: 32

  # mod_onesignal:
  #     app_id: "83a3b9ec-dfa7-4f53-83ac-ec4def015881"
  #     api_key: "ZDQ5ZTM1OGItZWM2My00NjViLWI5NDQtNjQ2NWY2NGMyMjI5"
  #     max_attempts: 3
  #     resend_interval: 2000

### Local Variables:
### mode: yaml
### End:
### vim: set filetype=yaml tabstop=8
